% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pylogger.R
\name{logger.setup}
\alias{logger.setup}
\title{Set Up Python-Style Logging Namespaces}
\usage{
logger.setup(traceLog = NULL, debugLog = NULL, infoLog = NULL,
  warnLog = NULL, errorLog = NULL, fatalLog = NULL)
}
\arguments{
\item{traceLog}{file name or full path where \code{logger.trace()} messages will be sent}

\item{debugLog}{file name or full path where \code{logger.debug()} messages will be sent}

\item{infoLog}{file name or full path where \code{logger.info()} messages will be sent}

\item{warnLog}{file name or full path where \code{logger.warn()} messages will be sent}

\item{errorLog}{file name or full path where \code{logger.error()} messages will be sent}

\item{fatalLog}{file name or full path where \code{logger.fatal()} messages will be sent}
}
\value{
No return value.
}
\description{
Python style logging allows developers to create log files at different levels
so that an \code{errorLog} will contain only log messages at the \code{ERROR} level while
a \code{debugLog} will contain log messages at the \code{DEBUG} level as well as all higher
levels.

Python-style log files are set up with \code{logger.setup()}. Logs can be set up for any
combination of log levels. Accepting the default \code{NULL} setting for any log file
simply means that log file will not be created.

Python-style logging requires the use of \code{logger.debug()} style logging statements as seen
in the example below.
}
\examples{
\dontrun{
logger.setup(debugLog='debug.log', infoLog='info.log', errorLog='error.log')
logger.trace('trace statement')
logger.debug('debug statement')
logger.info('info statement')
logger.warn('warn statement')
logger.error('error statement')
logger.fatal('fatal statement')
}
}
\author{
Jonathan Callahan
}
\seealso{
\code{\link{logger.trace}} \code{\link{logger.debug}}  \code{\link{logger.info}}
\code{\link{logger.warn}} \code{\link{logger.error}} \code{\link{logger.fatal}}
}
\keyword{data}

